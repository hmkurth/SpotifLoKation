a space for notes, or whatever...

Tues 3/23; First Team Meeting

(HK)Worked to try to figure out what the team was really doing, trying to get one person’s idea into an understandable
 and workable solution brings challenges.
We discussed what we wanted the end results to be and tried to create our project plan.  My understanding of the current
 scope of the project is that the client will provide a spotify artist ID, which the client must already have.  Our service
  will allow the client to input a location, we will consume/call the geonames api to get a long and lat for that location,
  (not zipcode to allow for international locations), and add that information to a database along with artist id.
  The end  user will then be able to access the artists’s location based on the artist’s id(or name??).
We will need to create an AWS instance, make a database, and user guide.
•	We are unsure about the legal implications of taking in data from spotify and putting it out slightly modified.
•	Will we verify the information provided or is that for…??
•	Rate limiting concerns, Need to recreate status codes for when the service is down, 429?
•	We will first need to verify that the spotify artists id is ok/can we get a true response?
•	Need to decide what info to put into the database, long and lat?
    -project deliverables states that it can be a web service OR library, what would a library of this look like??



Fri 3/26 Slack Discussion :
    Kaitlyn Harsla  3:39 PM
    Also,  Looking into this if we want to have the option of adding a location for any location globally,
    I think the best thing is latitude and longitute. Its a quick google search for a user. Also, how are we
    going to handle situations where a user tries to add a location for an artist that already has a location
    attached to it (we probably aren't at this step yet but should be something we think about while developing)?

    (Hk) Data Storage- 6

                       You could use MySQL's spatial extensions with GIS.

                       In a code example from Google displaying points on a map, they state:

                       When you create the MySQL table, you want to pay particular attention to the lat and lng attributes.
                       With the current zoom capabilities of Google Maps, you should only need 6 digits of precision after the decimal.

                       To keep the storage space required for our table at a minimum, you can specify that the lat and lng
                        attributes are floats of size (10,6). That will let the fields store 6 digits after the decimal,
                       plus up to 4 digits before the decimal, e.g. -123.456789 degrees I wouldn't worry about performance
                       differences between numeric types. Decent indices will have a far greater effect.
                         geolat - Float (10,6)
                      geolng - Float (10,6)
    added meta-inf, context.xml(will need to update the db name when created), and my POM file(you may have to tweak for your machines), deployment setup.
     I was looking at some documentation generators, not sure if that's necessary, but it looks relatively simple..https://my.miredot.com/dashboard/

Week 2:
    (HK)This week we got alot of experience with working as a team in a GIT repository, merging, branching, and pulling.
    We had a team meeting on Sunday 3/27 to discuss the upcoming week and how we were going to approach development.
    On a personal note, I've been struggling with the demands of the weekly work, my project, my professional dev presentation, and this project.
    I start one thing, but quickly find myself being pulled by something else, it's been stressful trying to get the right balance,
    I want to contribute to the team project, but I also have so many other things.  C'est le vie....
    Simone has really been the major player in the development and has been doing a great job leading us to product that she wants
    to consume, I've just been trying to keep up and find things that I can do to help the team and hope that I'm not making things worse.

    We decided that we could go ahead and use the spotify information, that was one question we had.
    We worked on getting the database up, I had some difficulty figuring out how to map that.  Simone and Kaitlyn worked on getting the main classes and daos completed.
    We had a little difficulty with the delete test, but Kaitlyn troubleshot that and got it working.
    We got a bit of experience with gitignore files, database passwords, and other sharing concerns, it was a great learning experience.  Keeping track of what other
    people are working on, and what I/ we should be doing, and how to piece it together has been one of the major learning curves for this project.
    I(HK) got yet another attempt to waste hours of my life trying to deploy on AWS...I figured that with all the problems I had previously with
    it I should be a pro by now...not so :)
    We have some decisions to make about how much information we are going to gather from spotify and reserve to make it "robust".
    I(HK) have been looking into some of the documentation resources...I was going for Miredot, but I couldn't get it working,
    I looked into swagger.io a little today, as well as some bootstrap templates.  I'm hoping to be able to figure that out soon.





Deliverables from Rubric:

 The product must be a significant web service or reusable library that could be used in the Individual Projects for this course.
Problem statement, project objectives, and project plan (detailed schedule for the project). Must be approved by the instructor.
Regular (minimum of weekly) time log/journal/blog/wiki entries documenting progress, obstacles, findings, learning points. Although commit logs will show who did what, please also include this information at a high level in the progress log.
Source code, HTML JavaDoc and all supporting materials published on GitHub.
User documentation for the targeted end users published publicly. For web services, this consumer guide should be located on one or more web pages at the same location as the hosted service.
If the application is a web service, deploy the service to a publicly accessible location, i.e., host on AWS.
Presentation of the progress and finished product to the class.
